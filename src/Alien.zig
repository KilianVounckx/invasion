const std = @import("std");
const Random = std.rand.Random;
const pi = std.math.pi;

const w4 = @import("wasm4.zig");

const lib = @import("lib.zig");
const Vec = lib.Vec;
const Rocket = lib.Rocket;

const Self = @This();

pos: Vec(f64),
vel: Vec(f64),

pub fn init(random: Random, player: Vec(f64)) Self {
    const side = random.int(u2);

    var x: f64 = undefined;
    var y: f64 = undefined;

    switch (side) {
        0 => { // left
            x = @intToFloat(f64, -sprite_width / 2);
            y = random.float(f64) * @intToFloat(f64, w4.CANVAS_SIZE);
        },
        1 => { // right
            x = @intToFloat(f64, w4.CANVAS_SIZE + sprite_width / 2);
            y = random.float(f64) * @intToFloat(f64, w4.CANVAS_SIZE);
        },
        2 => { // up
            y = @intToFloat(f64, -sprite_width / 2);
            x = random.float(f64) * @intToFloat(f64, w4.CANVAS_SIZE);
        },
        3 => { // down
            y = @intToFloat(f64, w4.CANVAS_SIZE + sprite_width / 2);
            x = random.float(f64) * @intToFloat(f64, w4.CANVAS_SIZE);
        },
    }

    return .{
        .pos = Vec(f64).init(x, y),
        .vel = Vec(f64).init(player.x - x, player.y - y).normalized(),
    };
}

pub fn collides(self: Self, rocket: Rocket) bool {
    if (self.pos.x + collision_width < rocket.pos.x) return false;
    if (self.pos.x > rocket.pos.x + Rocket.collision_width) return false;
    if (self.pos.y + collision_height < rocket.pos.y) return false;
    if (self.pos.y > rocket.pos.y + Rocket.collision_height) return false;
    return true;
}

pub fn outOfBounds(self: Self) bool {
    return self.pos.x < -sprite_width * 2 or
        self.pos.y < -sprite_height * 2 or
        self.pos.x > w4.CANVAS_SIZE + sprite_width * 2 or
        self.pos.y > w4.CANVAS_SIZE + sprite_height * 2;
}

pub fn update(self: *Self) void {
    self.pos.x += self.vel.x;
    self.pos.y += self.vel.y;
}

pub fn draw(self: Self, player: Vec(f64)) void {
    var sprite: [64]u8 = undefined;
    if (player.x > self.pos.x) {
        if (player.y > self.pos.y) {
            sprite = alien_br;
        } else {
            sprite = alien_tr;
        }
    } else {
        if (player.y > self.pos.y) {
            sprite = alien_bl;
        } else {
            sprite = alien_tl;
        }
    }

    w4.DRAW_COLORS.* = 0x2341;
    w4.blit(
        &sprite,
        @floatToInt(i32, self.pos.x) - sprite_width / 2,
        @floatToInt(i32, self.pos.y) - sprite_height / 2,
        sprite_width,
        sprite_height,
        w4.BLIT_2BPP,
    );
}

const alien_bl = [64]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x16, 0x94, 0x00, 0x01, 0x57, 0x95, 0x40, 0x01, 0x55, 0x55, 0x40, 0x15, 0x69, 0x69, 0x54, 0x15, 0x79, 0x79, 0x54, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x00, 0x14, 0x14, 0x00, 0x00, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const alien_br = [64]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x16, 0x94, 0x00, 0x01, 0x56, 0xd5, 0x40, 0x01, 0x55, 0x55, 0x40, 0x15, 0x69, 0x69, 0x54, 0x15, 0x6d, 0x6d, 0x54, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x00, 0x14, 0x14, 0x00, 0x00, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const alien_tl = [64]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x16, 0xd4, 0x00, 0x01, 0x57, 0xd5, 0x40, 0x01, 0x55, 0x55, 0x40, 0x15, 0x6d, 0x6d, 0x54, 0x15, 0x7d, 0x7d, 0x54, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x00, 0x14, 0x14, 0x00, 0x00, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const alien_tr = [64]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x16, 0xd4, 0x00, 0x01, 0x56, 0x95, 0x40, 0x01, 0x55, 0x55, 0x40, 0x15, 0x6d, 0x6d, 0x54, 0x15, 0x69, 0x69, 0x54, 0x01, 0x55, 0x55, 0x40, 0x01, 0x55, 0x55, 0x40, 0x00, 0x14, 0x14, 0x00, 0x00, 0x14, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

const sprite_width = 16;
const sprite_height = 16;

const collision_width = 10;
const collision_height = 10;
